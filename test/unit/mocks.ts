import IContainer from "../../src/interfaces/container.interfaces";
import {
  IMaze,
  IMazeController,
  IMazeRepository,
  IMazeService,
  MazeLayout,
} from "../../src/interfaces/maze.interfaces";
import { IDB } from "../../src/persistence/db.interfaces";

const mazeDBMock = (maze: IMaze): IDB<IMaze> => {
  return {
    insert: jest.fn(() => maze.id),
    fetch: jest.fn((id) => (id == maze.id ? maze : undefined)),
    update: jest.fn(() => maze),
    delete: jest.fn((id) => id == maze.id),
  };
};

const mazeRepositoryMock = (maze: IMaze): IMazeRepository => {
  return {
    insert: jest.fn((element: IMaze): string => validMazeID),
    fetch: jest.fn((id: string) => (id == maze.id ? maze : new Error("error"))),
    update: jest.fn((element: IMaze) => element),
    delete: jest.fn((id: string) =>
      id == maze.id ? true : new Error("error")
    ),
  };
};

const mazeServiceMock = (maze: IMaze): IMazeService => {
  return {
    create: jest.fn((layout) =>
      layout == maze.layout ? maze : new Error("error")
    ),
    autogenerate: jest.fn(),
    findById: jest.fn((id: string) =>
      id == maze.id ? maze : new Error("error")
    ),
    solve: jest.fn((id: string) =>
      id == maze.id ? validMazeLayoutSolutionMock : new Error("error")
    ),
  };
};

const mazeControllerMock = (): IMazeController => {
  return {
    create: jest.fn(),
    createAutogenerated: jest.fn(),
    get: jest.fn(),
    solve: jest.fn(),
  };
};

const containerMock = (mazeController: IMazeController): IContainer => {
  return {
    mazeController,
  };
};

const validMazeLayoutSolutionMock: MazeLayout = [
  [" ", " ", "B"],
  ["C", "C", "C"],
  ["B", " ", " "],
];

const mazeSolverMock = jest.fn((maze: IMaze): MazeLayout | Error => {
  return validMazeLayoutSolutionMock;
});

const validMazeID = "1";
const validMazeLayoutMock: MazeLayout = [
  ["A", "A", "B"],
  ["C", "C", "C"],
  ["B", "A", "A"],
];
const validMazeMock: IMaze = {
  id: validMazeID,
  layout: validMazeLayoutMock,
};

const insolvableMazeID = "2";
const insolbableMazeLayoutMock: MazeLayout = [
  ["A", "A", "B"],
  ["A", "A", "A"],
  ["B", "A", "A"],
];
const insolbableMazeMock: IMaze = {
  id: insolvableMazeID,
  layout: insolbableMazeLayoutMock,
};

const validEmptyMazeLayoutMock: MazeLayout = [
  [" ", " ", " "],
  [" ", " ", " "],
  [" ", " ", " "],
];

const invalidMazeLayoutMock: MazeLayout = [
  [" ", " "],
  [" ", " ", " "],
  [" ", " ", " "],
];

export {
  mazeDBMock,
  mazeRepositoryMock,
  mazeServiceMock,
  mazeControllerMock,
  containerMock,
  mazeSolverMock,
  validMazeMock,
  validEmptyMazeLayoutMock,
  validMazeLayoutSolutionMock,
  insolbableMazeMock,
  insolbableMazeLayoutMock,
  validMazeLayoutMock,
  invalidMazeLayoutMock,
};
