import { Request, Response } from "express";
import { validate, ValidationError } from "jsonschema";
import { IMazeController, IMazeService } from "../interfaces/maze.interfaces";
import { createSchema } from "../schemas/maze.schemas";

const formatErrors = (errors: ValidationError[]): string => {
  return errors.map((e) => e.stack).join(",");
};

const newController = (service: IMazeService): IMazeController => {
  return {
    create: (req: Request, res: Response) => {
      const body = req.body;
      const validation = validate(body, createSchema);

      if (!validation.valid) {
        const errors = new Error(formatErrors(validation.errors));
        res.status(400).send(errors.message);
        return;
      }

      const result = service.create(body.layout);
      if (result instanceof Error) {
        res.status(400).send(result.message);
        return;
      }

      res.status(201).send(result);
    },

    createAutogenerated: (req: Request, res: Response) => {
      res.status(201).send(service.autogenerate());
    },

    get: (req: Request, res: Response) => {
      const result = service.findById(req.params.id);
      if (result instanceof Error) {
        res.status(404).send(result.message);
        return;
      }
      res.status(200).send(result);
    },

    solve: (req: Request, res: Response) => {
      const result = service.solve(req.params.id);
      if (result instanceof Error) {
        res.status(404).send(result.message);
        return;
      }
      res.status(200).send(result);
    },
  };
};

export default newController;
